import OpenAI from "openai";
import config from "../config/index.js";

export class IntentClassifier {
  constructor() {
    this.openai = new OpenAI({
      apiKey: config.openai.apiKey,
    });
  }

  /**
   * Classify user intent
   * @param {string} userInput - User input text
   * @param {string} userId - User ID for context
   * @returns {Object} - Classification result
   */
  async classifyIntent(userInput, userId) {
    const prompt = `
B·∫°n l√† m·ªôt AI classifier chuy√™n ph√¢n t√≠ch intent c·ªßa user trong h·ªá th·ªëng qu·∫£n l√Ω task.

INPUT: "${userInput}"

H√£y ph√¢n t√≠ch v√† tr·∫£ v·ªÅ JSON v·ªõi format sau:

{
  "intentType": "conversation|simple_task|scheduling|task_query|task_update|task_delete|task_stats|task_priority|task_reminder",
  "confidence": 0.0-1.0,
  "action": "create|update|delete|query|stats|chat|prioritize|remind",
  "taskIdentifier": "task_title_or_keyword_or_null",
  "reasoning": "explanation_of_classification"
}

CLASSIFICATION RULES:

1. **conversation**: 
   - Ch√†o h·ªèi, chia s·∫ª c·∫£m x√∫c, c√¢u h·ªèi chung
   - VD: "Ch√†o b·∫°n", "H√¥m nay t√¥i th·∫ø n√†o", "C·∫£m ∆°n b·∫°n"

2. **simple_task**: 
   - T·∫°o task ƒë∆°n gi·∫£n, reminder
   - VD: "Nh·∫Øc t√¥i g·ªçi kh√°ch h√†ng", "T·∫°o task mua s·ªØa", "Th√™m vi·ªác h·ªçp team"

3. **scheduling**: 
   - S·∫Øp x·∫øp nhi·ªÅu task, l√™n l·ªãch ph·ª©c t·∫°p
   - VD: "S·∫Øp x·∫øp l·ªãch h√¥m nay", "Plan cho tu·∫ßn n√†y", "L√™n schedule meeting"

4. **task_query**: 
   - Truy v·∫•n, t√¨m ki·∫øm, xem task
   - VD: "Task h√¥m nay c√≥ g√¨", "Cho t√¥i xem task pending", "Danh s√°ch c√¥ng vi·ªác"

5. **task_update**: 
   - C·∫≠p nh·∫≠t task c·ª• th·ªÉ (status, th√¥ng tin)
   - VD: "ƒê√°nh d·∫•u task X completed", "Update task g·ªçi kh√°ch h√†ng th√†nh urgent", "Ho√†n th√†nh vi·ªác mua s·ªØa"
   - taskIdentifier: t√™n ho·∫∑c t·ª´ kh√≥a nh·∫≠n di·ªán task

6. **task_delete**: 
   - X√≥a task c·ª• th·ªÉ  
   - VD: "X√≥a task mua s·ªØa", "Delete task meeting", "B·ªè vi·ªác g·ªçi kh√°ch h√†ng"
   - taskIdentifier: t√™n ho·∫∑c t·ª´ kh√≥a nh·∫≠n di·ªán task

7. **task_stats**: 
   - Th·ªëng k√™, b√°o c√°o task
   - VD: "Th·ªëng k√™ task tu·∫ßn n√†y", "B√°o c√°o c√¥ng vi·ªác", "Progress h√¥m nay", "Hi·ªáu su·∫•t l√†m vi·ªác"

8. **task_priority**: 
   - Thay ƒë·ªïi ƒë·ªô ∆∞u ti√™n task
   - VD: "Task g·ªçi kh√°ch h√†ng ∆∞u ti√™n cao", "ƒê·∫∑t task X l√†m urgent", "Priority th·∫•p cho task Y"
   - taskIdentifier: t√™n task c·∫ßn thay ƒë·ªïi priority

9. **task_reminder**: 
   - Thi·∫øt l·∫≠p reminder cho task
   - VD: "Nh·∫Øc t√¥i 30 ph√∫t tr∆∞·ªõc meeting", "Set reminder cho task X", "B√°o th·ª©c tr∆∞·ªõc 1 gi·ªù"
   - taskIdentifier: t√™n task c·∫ßn set reminder

Ch√∫ √Ω:
- N·∫øu c√≥ nh·∫Øc ƒë·∫øn t√™n task c·ª• th·ªÉ -> taskIdentifier
- Confidence cao khi intent r√µ r√†ng
- ∆Øu ti√™n task operations n·∫øu c√≥ keyword li√™n quan task
- N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, default v·ªÅ conversation v·ªõi confidence th·∫•p
`;

    try {
      const completion = await this.openai.chat.completions.create({
        model: config.openai.model,
        max_tokens: 500,
        temperature: 0.2,
        response_format: { type: "json_object" },
        messages: [
          { role: "system", content: prompt },
          { role: "user", content: userInput }
        ],
      });

      const result = JSON.parse(completion.choices[0].message.content);
      
      console.log(`üéØ Intent Classification:`, {
        input: userInput.substring(0, 50) + "...",
        intentType: result.intentType,
        action: result.action,
        confidence: result.confidence,
        taskIdentifier: result.taskIdentifier
      });

      return result;

    } catch (error) {
      console.error("‚ùå Error in intent classification:", error);
      
      // Fallback classification
      return {
        intentType: "conversation",
        confidence: 0.5,
        action: "chat",
        taskIdentifier: null,
        reasoning: "Classification failed, defaulting to conversation"
      };
    }
  }

  /**
   * Route request based on intent classification
   * @param {Object} classification - Classification result
   * @param {string} userInput - User input
   * @param {string} userId - User ID
   * @param {string} sessionId - Session ID
   * @returns {Object} - Routing decision
   */
  async routeRequest(classification, userInput, userId, sessionId) {
    const { intentType, action, taskIdentifier, confidence } = classification;

    console.log(`üöÄ Routing request:`, {
      intentType,
      action,
      confidence,
      hasTaskIdentifier: !!taskIdentifier
    });

    // N·∫øu confidence th·∫•p, default v·ªÅ conversation
    if (confidence < 0.6) {
      console.log(`‚ö†Ô∏è Low confidence (${confidence}), routing to conversation`);
      return {
        route: 'process-conversation',
        intentType: 'conversation'
      };
    }

    // Conversation, simple_task, scheduling -> g·ªçi process-conversation
    if (['conversation', 'simple_task', 'scheduling'].includes(intentType)) {
      return {
        route: 'process-conversation',
        intentType: intentType
      };
    }

    // Task operations - hi·ªán t·∫°i ƒë·ªÉ tr·ªëng, s·∫Ω implement sau
    if (['task_query', 'task_update', 'task_delete', 'task_stats', 'task_priority', 'task_reminder'].includes(intentType)) {
      console.log(`üìã Task operation detected: ${intentType} - Will implement later`);
      
      // T·∫°m th·ªùi tr·∫£ v·ªÅ conversation response
      return {
        route: 'task-operation-placeholder',
        intentType: intentType,
        taskIdentifier: taskIdentifier,
        action: action,
        message: `T√≠nh nƒÉng ${intentType} ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Hi·ªán t·∫°i t√¥i ch·ªâ c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o task m·ªõi, l√™n l·ªãch v√† tr√≤ chuy·ªán.`
      };
    }

    // Default fallback
    return {
      route: 'process-conversation',
      intentType: 'conversation'
    };
  }
}